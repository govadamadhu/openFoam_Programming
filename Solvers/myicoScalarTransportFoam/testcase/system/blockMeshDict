/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

x1 -10;
x2 -2;
x3 -0.3535534;
x4 0.3535534;
x5 2;
x6 30;
y1 -8;
y2 -2;
y3 -0.3535534;
y4 0.3535534;
y5 2;
y6 8;
z1 -0.5;
z2 0.5;

xc1 30;
xc2 40;
xc3 150;
xc4 20; //xc3 = yc2
yc1 15;
yc2 20;
yc3 15;
zc1 1;

//Mesh refinement
xm1 0.2;
xm2 0.5;
xm3 2.5;

ym1 4;
ym2 0.25;

vertices
(
	// back
    ($x4 $y3 $z1) //0
	($x5 $y2 $z1) //1
	($x5 $y5 $z1) //2
	($x4 $y4 $z1) //3
	($x3 $y4 $z1) //4
	($x2 $y5 $z1) //5
	($x2 $y2 $z1) //6
	($x3 $y3 $z1) //7
	($x1 $y1 $z1) //8
	($x2 $y1 $z1) //9
	($x5 $y1 $z1) //10
	($x6 $y1 $z1) //11
	($x6 $y2 $z1) //12
	($x6 $y5 $z1) //13
	($x6 $y6 $z1) //14
	($x5 $y6 $z1) //15
	($x2 $y6 $z1) //16
	($x1 $y6 $z1) //17
	($x1 $y5 $z1) //18
	($x1 $y2 $z1) //19
	// front
	($x4 $y3 $z2) //20
	($x5 $y2 $z2) //21
	($x5 $y5 $z2) //22
	($x4 $y4 $z2) //23
	($x3 $y4 $z2) //24
	($x2 $y5 $z2) //25
	($x2 $y2 $z2) //26
	($x3 $y3 $z2) //27
	($x1 $y1 $z2) //28
	($x2 $y1 $z2) //29
	($x5 $y1 $z2) //30
	($x6 $y1 $z2) //31
	($x6 $y2 $z2) //32
	($x6 $y5 $z2) //33
	($x6 $y6 $z2) //34
	($x5 $y6 $z2) //35
	($x2 $y6 $z2) //36
	($x1 $y6 $z2) //37
	($x1 $y5 $z2) //38
    ($x1 $y2 $z2) //39
);

blocks
(
    hex (2 3 0 1 22 23 20 21) ($xc2 $yc2 $zc1) simpleGrading ($xm1 1 1) //0
	hex (5 4 3 2 25 24 23 22) ($xc2 $yc2 $zc1) simpleGrading ($xm1 1 1) //1
	hex (6 7 4 5 26 27 24 25) ($xc2 $yc2 $zc1) simpleGrading ($xm1 1 1) //2
	hex (1 0 7 6 21 20 27 26) ($xc2 $yc2 $zc1) simpleGrading ($xm1 1 1) //3
	hex (6 19 8 9 26 39 28 29) ($xc1 $yc1 $zc1) simpleGrading ($xm3 $ym1 1) //4
	hex (1 6 9 10 21 26 29 30) ($xc4 $yc1 $zc1) simpleGrading (1 $ym1 1) //5
	hex (12 1 10 11 32 21 30 31) ($xc3 $yc1 $zc1) simpleGrading ($xm2 $ym1 1) //6
	hex (13 2 1 12 33 22 21 32) ($xc3 $yc2 $zc1) simpleGrading ($xm2 1 1) //7
	hex (14 15 2 13 34 35 22 33) ($xc3 $yc3 $zc1) simpleGrading ($xm2 $ym2 1) //8
	hex (15 16 5 2 35 36 25 22) ($xc4 $yc3 $zc1) simpleGrading (1 $ym2 1) //9
	hex (16 17 18 5 36 37 38 25) ($xc1 $yc3 $zc1) simpleGrading ($xm3 $ym2 1) //10
	hex (5 18 19 6 25 38 39 26) ($xc1 $yc2 $zc1) simpleGrading ($xm3 1 1) //11
	
);

edges
(
	arc 0 3 (0.5 0 -0.5)
	arc 3 4 (0 0.5 -0.5)
	arc 4 7 (-0.5 0 -0.5)
	arc 7 0 (0 -0.5 -0.5)
	
	arc 20 23 (0.5 0 0.5)
	arc 23 24 (0 0.5 0.5)
	arc 24 27 (-0.5 0 0.5)
	arc 27 20 (0 -0.5 0.5)
	
	arc 1 2 (2.828427 0 -0.5)
	arc 2 5 (0 2.828427 -0.5)
	arc 5 6 (-2.828427 0 -0.5)
	arc 6 1 (0 -2.828427 -0.5)
	
	arc 21 22 (2.828427 0 0.5)
	arc 22 25 (0 2.828427 0.5)
	arc 25 26 (-2.828427 0 0.5)
	arc 26 21 (0 -2.828427 0.5)
);

boundary
(
    out
    {
        type patch;
        faces
        (
            (14 34 33 13)
            (13 33 32 12)
            (12 32 31 11)
        );
    }
    in
    {
        type patch;
        faces
        (
            (37 17 18 38)
            (38 18 19 39)
            (39 19 8 28)
        );
    }
    cylinder
    {
        type wall;
        faces
        (
            (7 0 20 27)
            (0 3 23 20)
            (3 4 24 23)
            (4 7 27 24)
			
        );
    }
    sym1
    {
        type symmetryPlane;
        faces
        (
            (10 11 31 30)
            (9 10 30 29)
            (8 9 29 28)
        );
    }
    sym2
    {
        type symmetryPlane;
        faces
        (
            (17 37 36 16)
            (16 36 35 15)
            (15 35 34 14)
        );
    }
    back
    {
        type empty;
        faces
        (
            (6 9 8 19)
            (1 10 9 6)
            (12 11 10 1)
            (13 12 1 2)
            (14 13 2 15)
            (15 2 5 16)
            (16 5 18 17)
            (5 6 19 18)
            (0 1 6 7)
            (3 2 1 0)
            (4 5 2 3)
            (7 6 5 4)
        );
    }
    front
    {
        type empty;
        faces
        (
            (26 39 28 29)
            (21 26 29 30)
            (32 21 30 31)
            (33 22 21 32)
            (34 35 22 33)
            (35 36 25 22)
            (36 37 38 25)
            (25 38 39 26)
            (20 27 26 21)
            (23 20 21 22)
            (24 23 22 25)
            (27 24 25 26)
        );
    }
);


/* boundary
(
	out
    {
        type patch;
        faces
	(
		(14 34 33 13)
		(13 33 32 12)
		(12 32 31 11)
	)
	}
	in
	{
		type patch;
		faces
	(
		(37 17 18 38)
		(38 18 19 39)
		(39 19 8 28)
	)
	}
	cylinder
	{
		type wall;
		faces
	(
		(7 0 20 27)
		(0 3 23 20)
		(3 4 24 23
		(4 7 27 24)
	)
	}
	sym1
	{
		type symmetryPlane;
		faces
	(
		(10 11 31 30)
		(9 10 30 29)
		(8 9 29 28)
	)
	}
	sym2
	{
		type symmetryPlane;
		faces
	(
		(17 37 36 16)
		(16 36 35 15)
		(15 35 34 14)
	)
	}
	back
	{
		type empty;
		faces
	(
		(6 9 8 19)
		(1 10 9 6)
		(12 11 10 1)
		(13 12 1 2)
		(14 13 2 15)
		(15 2 5 16)
		(16 5 18 17)
		(5 6 19 18)
		(0 1 6 7)
		(3 2 1 0)
		(4 5 2 3)
		(7 6 5 4)
	)	
	}	
	front
	{
		type empty;
		faces
	(
		(26 39 28 29)
		(21 26 29 30)
		(32 21 30 31)
		(33 22 21 32)
		(34 35 22 33)
		(35 36 25 22)
		(36 37 38 25)
		(25 38 39 26)
		(20 27 26 21)
		(23 20 21 22)
		(24 23 22 25)
		(27 24 25 26)
	)
	}
);
*/

mergePatchPairs
(
);	
		
// ************************************************************************* //
