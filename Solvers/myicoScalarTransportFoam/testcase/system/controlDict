/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     myicoScalarTransportFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         30;

deltaT          0.05;

writeControl    runTime;

writeInterval   0.1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;


// ************************************************************************* //
/*functions
{
	forces
	{
	type forces;
	functionObjectLibs ("libforces.so");
	outputControl	timeStep;
	outputInterval	1;
	
	patches	("cylinder");
	
	pName p;
	Uname U;
	
	rho	rhoInf;
	rhoInf 1;
	log	true;
	CofR (0 0 0);
	}
	
	forceCoeffs
	{
	type forceCoeffs;
	functionObjectLibs ("libforces.so");
	outputControl	timeStep;
	outputInterval	1;
	patches	("cylinder");
	
	pName	p;
	Uname	U;
	rho		rhoInf;
	rhoInf	1.0;
	
	log true;
	
	CofR	(0 0 0);
	liftDir	(0 1 0);
	dragDir	(1 0 0);
	pitchAxis (0 0 1);
	magUInf 1.0;
	lRef 1.0; // reference length for moments
	Aref 1.0; // reference area 1 for 2d
	
}

*/



/*
functions
{

	inMassFlow
    {
        type          patchProbes; 
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled         true;

        writeControl    timeStep;  // Replace outputControl with writeControl
        writeInterval   10;        // Replace outputInterval with writeInterval

        log             true;

        valueOutput     false;

        source          patch;
        sourceName      in;

        operation       sum;
        fields
        (
            phi
        );
    }

    outMassFlow
    {
        type           patchProbes; 
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled         true;

        writeControl    timeStep;  // Replace outputControl with writeControl
        writeInterval   10;        // Replace outputInterval with writeInterval

        log             yes;

        valueOutput     false;

        source          patch;
        sourceName      out;

        operation       sum;
        fields
        (
            phi
        );
    }
	
	fieldAverage
	{
		type		fieldAverage;
		functionObjectLibs	("libfieldFunctionObjects.so");
		enabled		true;
		outputControl	outputTime;
		
		fields
		(
			U
			{
				mean	on;
				prime2Mean	on;
				base	time;
			}

			p
			{
				mean	on;
				prime2Mean	on;
				base	time;
			}
		);
	}

	force_object
	{
	type forces;
	functionObjectLibs ("libforces.so");
	outputControl	timeStep;
	outputInterval	10;
	
	patches("cylinder");
	
	pName p;
	Uname U;
	
	rhoName rhoInf;
	rhoInf 1;
	
	CofR (0 0 0);
	}
	
	forceCoeffs_object
	{
	type forceCoeffs;
	functionObjectLibs ("libforces.so");
	patches (cylinder);
	
	pName p;
	Uname U;
	rhoName rhoInf;
	rhoInf 1.0;
	
	log true;
	
	CofR (0.0 0 0);
	liftDir (0 1 0);
	dragDir (1 0 0);
	pitchAxis (0 0 1);
	magUInf 1.0;
	lRef 1.0; // reference length for moments
	Aref 1.0; // reference area 1 for 2d
	
		outputControl timeStep;
		outputInterval 1;
	}

	minmaxdomain
	{
	type fieldMinMax;
	
	functionObjectLibs ("libfieldFunctionObjects.so");
	
	enabled true;
	
	mode component;
	
	outputControl timeStep;
	outputInterval 1;
	
	log true;
	
	fields (p U);
	}

	
};	
		
*/
	